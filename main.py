import os
import re
import logging
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤
post_logger = logging.getLogger('post_logger')
post_logger.setLevel(logging.INFO)
post_handler = logging.FileHandler("posts.log", encoding="utf-8")
post_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
post_logger.addHandler(post_handler)
post_logger.propagate = False  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ–≥–µ

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
    from telegram.error import BadRequest, Forbidden
except ImportError as e:
    logger.error(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install python-telegram-bot")
    exit(1)

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')  # –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ @username
BOT_USERNAME = os.getenv('BOT_USERNAME', '').lstrip('@')  # –±–µ–∑ @

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
CATEGORIES = {
    'technology': 'üìö –¢–ï–•–ù–û–õ–û–ì–ò–ò',
    'money': 'üí∞ –î–ï–ù–¨–ì–ò', 
    'media': 'üì∫ –ú–ï–î–ò–ê',
    'personal': 'üí´ –õ–ò–ß–ù–û–ï',
    'culture': 'üé≠ –ö–£–õ–¨–¢–£–†–ê',
    'science': 'üî¨ –ù–ê–£–ö–ê',
    'life': 'üåø –ñ–ò–ó–ù–¨'
}

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class MemoryStorage:
    def __init__(self):
        self.posts = []
        self.users = {}
        self.user_states = {}
    
    def save_user(self, user_id: int, username: str = None):
        self.users[user_id] = {
            'username': username,
            'last_active': datetime.now(timezone.utc).isoformat()
        }
    
    def save_post(self, user_id: int, category: str, title: str, url: str):
        post = {
            'user_id': user_id,
            'category': category,
            'title': title,
            'url': url,
            'created_at': datetime.now(timezone.utc).isoformat(),
            'id': len(self.posts) + 1
        }
        self.posts.append(post)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try:
            username = self.users.get(user_id, {}).get('username', 'unknown')
            post_logger.info(f"NEW_POST | UserID: {user_id} | Username: @{username} | "
                           f"Category: {category} | Title: {title} | URL: {url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        
        return post['id']
    
    def get_recent_posts(self, limit_per_category: int = 5, max_total: int = 50):
        posts_by_category = {}
        for category in CATEGORIES.keys():
            category_posts = [p for p in self.posts if p['category'] == category]
            category_posts.sort(key=lambda x: x['created_at'], reverse=True)
            if category_posts:
                posts_by_category[category] = category_posts[:limit_per_category]
        
        total_posts = sum(len(posts) for posts in posts_by_category.values())
        if total_posts > max_total:
            reduction_factor = max_total / total_posts
            for category in list(posts_by_category.keys()):
                new_limit = max(1, int(len(posts_by_category[category]) * reduction_factor))
                posts_by_category[category] = posts_by_category[category][:new_limit]
        
        return {k: v for k, v in posts_by_category.items() if v}

    def get_user_state(self, user_id: int) -> Dict[str, Any]:
        return self.user_states.get(user_id, {'state': 'start', 'data': {}})
    
    def set_user_state(self, user_id: int, state: str, data: dict = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if data is None:
            data = {}
        
        if user_id in self.user_states:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏
            current_data = self.user_states[user_id]['data'].copy()
            current_data.update(data)
            data = current_data
        
        self.user_states[user_id] = {'state': state, 'data': data}
    
    def update_user_data(self, user_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {'state': 'start', 'data': {}}
        self.user_states[user_id]['data'].update(kwargs)
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            del self.user_states[user_id]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()

# –í–∞–ª–∏–¥–∞—Ü–∏—è URL
def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
    url = url.strip()
    pattern = re.compile(
        r'^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
        r'(?::\d+)?(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(pattern.match(url))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    if not CHANNEL_ID:
        return True
        
    try:
        # CHANNEL_ID –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ @username
        chat_id = CHANNEL_ID
        try:
            chat_id = int(chat_id)
        except ValueError:
            if chat_id.startswith('@'):
                chat_id = chat_id
            else:
                chat_id = f"@{chat_id}"
        
        member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except (BadRequest, Forbidden) as e:
        if "CHAT_NOT_FOUND" in str(e) or "not found" in str(e).lower():
            logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_ID: {CHANNEL_ID}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_id = user.id
        storage.save_user(user_id, user.username)
        
        if not await check_subscription(user_id, context):
            await show_subscription_required(update, context)
            return
        
        await show_welcome(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await error_handler(update, context)

async def show_subscription_required(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        if not CHANNEL_ID:
            await show_welcome(update, context)
            return
            
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ ID
        try:
            chat_link = int(CHANNEL_ID)
            channel_link = f"https://t.me/c/{str(chat_link).replace('-100', '')}"
        except ValueError:
            clean_id = CHANNEL_ID.lstrip('@')
            channel_link = f"https://t.me/{clean_id}"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üîê <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ¬´–ö–æ–ª–ª–µ–∫—Ç–∏—É–º¬ª</b> ‚Äî –≤–∞—à –±–∏–ª–µ—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
            "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–æ–≤, –≥–¥–µ –º—ã –ø–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É —Ä–∞—Å—Ç–∏.\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –≤–∑–∞–∏–º–æ–ø–∏–∞—Ä–∞."
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_subscription_required: {e}")
        await error_handler(update, context)

async def show_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        welcome_text = (
            "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≤–∑–∞–∏–º–æ–ø–∏–∞—Ä–∞!</b>\n\n"
            "–ó–¥–µ—Å—å –∞–≤—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã –≤ —Ç–æ–ø.\n\n"
            "üìå <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—à—å —Å–≤–æ–∏ —Å—Ç–∞—Ç—å–∏ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å –∂–∏–≤—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ ‚Äî —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–∂–µ —É–≤–∏–¥—è—Ç\n"
            "‚Ä¢ –†–∞—Å—Ç–∏—à—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –±–µ–∑ –±—é–¥–∂–µ—Ç–∞, —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–Ω—É—é –ª–æ—è–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –ø–æ–º–æ–≥–∞–µ—à—å –¥—Ä—É–≥–∏–º ‚Äî –ø–æ–º–æ–≥–∞—é—Ç —Ç–µ–±–µ! ü§ù"
        )
        
        keyboard = [[InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="next_to_categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=welcome_text, reply_markup=reply_markup, parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                text=welcome_text, reply_markup=reply_markup, parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_welcome: {e}")
        await error_handler(update, context)

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        keyboard = []
        row = []
        for i, (key, value) in enumerate(CATEGORIES.items()):
            callback_data = f"category_{key}"
            row.append(InlineKeyboardButton(value, callback_data=callback_data))
            if len(row) == 3 or i == len(CATEGORIES) - 1:
                keyboard.append(row)
                row = []
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="üéØ <b>–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n\n–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        storage.set_user_state(update.effective_user.id, 'awaiting_category')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")
        await error_handler(update, context)

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        category_key = query.data.replace('category_', '')
        
        if category_key not in CATEGORIES:
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", parse_mode="HTML")
            return
        
        category_name = CATEGORIES[category_key]
        storage.set_user_state(user_id, 'awaiting_title', {'category': category_key})
        
        await query.edit_message_text(
            text=f"üè∑Ô∏è <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}</b>\n\n"
                 "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞ üìù\n"
                 "<i>(–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]]),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_category_selection: {e}")
        await error_handler(update, context)

async def handle_title_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    try:
        if not update.message:
            return
        
        user_id = update.effective_user.id
        title = update.message.text.strip()
        
        if len(title) > 50:
            await update.message.reply_text(
                "‚ùå <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫!</b>\n\n"
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ –∏ —ë–º—á–µ ‚úçÔ∏è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]]),
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = storage.get_user_state(user_id)['data']
        category = user_data.get('category')
        if not category:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            await start(update, context)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º, –Ω–µ —Ç–µ—Ä—è—è –¥–∞–Ω–Ω—ã–µ
        storage.set_user_state(user_id, 'awaiting_url', {'category': category, 'title': title})
        
        await update.message.reply_text(
            "üîó <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª</b>\n\n"
            "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É", callback_data="back_to_title")]]),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_title_input: {e}")
        await error_handler(update, context)

async def handle_url_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ URL"""
    try:
        if not update.message:
            return
        
        user_id = update.effective_user.id
        url = update.message.text.strip()
        user_data = storage.get_user_state(user_id)['data']
        
        if 'category' not in user_data or 'title' not in user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            await start(update, context)
            return
        
        if not is_valid_url(url):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://\n"
                "–ü—Ä–∏–º–µ—Ä: https://example.com/my-article",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É", callback_data="back_to_title")]]),
                parse_mode="HTML"
            )
            return
        
        post_id = storage.save_post(user_id, user_data['category'], user_data['title'], url)
        
        if post_id:
            await update.message.reply_text(
                "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–∏–¥—è—Ç —Ç–≤–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç –µ–≥–æ ü§ù",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            await show_other_posts(update, context)
        else:
            await update.message.reply_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            storage.clear_user_state(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_url_input: {e}")
        await error_handler(update, context)

async def show_other_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏"""
    try:
        user_id = update.effective_user.id
        posts_by_category = storage.get_recent_posts()
        
        if not posts_by_category:
            no_posts_text = (
                "üì≠ <b>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –∏—Ö –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ ‚Äî —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–µ—Ç! üå±"
            )
            if hasattr(update, 'message'):
                await update.message.reply_text(no_posts_text, parse_mode="HTML")
            else:
                await update.callback_query.edit_message_text(no_posts_text, parse_mode="HTML")
            return
        
        message_text = "üéØ <b>–í—Ä–µ–º—è –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –æ—Ç–≤–µ—Ç!</b>\n\n"
        message_text += "üëá <i>–ó–¥–µ—Å—å —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤:</i>\n\n"
        
        for category_key, posts in posts_by_category.items():
            message_text += f"<b>{CATEGORIES[category_key]}:</b>\n"
            for i, post in enumerate(posts, 1):
                # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                message_text += f'{i}. <a href="{post["url"]}">{post["title"]}</a>\n'
            message_text += "\n"
        
        message_text += (
            "üí´ <b>–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤:</b>\n"
            "‚Ä¢ –ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ üëç\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üí¨\n"
            "‚Ä¢ –°–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç üîÑ\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø —Å–¥–µ–ª–∞–ª¬ª\n"
            "<i>–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ ‚Äî –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–¥–µ—Ä–∂–∞–ª –∞–≤—Ç–æ—Ä–æ–≤", callback_data="support_done")],
            [InlineKeyboardButton("üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'message'):
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True)
        else:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True)
        
        storage.set_user_state(user_id, 'awaiting_support_confirmation')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_other_posts: {e}")
        await error_handler(update, context)

async def handle_support_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        storage.clear_user_state(user_id)
        
        final_text = (
            "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–∑–∞–∏–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –∞–≤—Ç–æ—Ä—ã —Å–¥–µ–ª–∞—é—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ ‚Äî –¥–ª—è —Ç–µ–±—è.\n"
            "–°–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏! ü§ù\n\n"
            "üí° <i>–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over")],
            [InlineKeyboardButton("üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=final_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_support_done: {e}")
        await error_handler(update, context)

async def handle_invite_friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"""
    try:
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        username = user.username or user.first_name or "–∞–≤—Ç–æ—Ä"
        
        invite_text = (
            f"üì£ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!</b>\n\n"
            f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ü–∏—à—É –∫ –í–∞–º —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç {username}. "
            f"–í—Å–µ –º—ã —Ä–∞–∑–º–µ—â–∞–µ–º —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö. –ò –≤—Å–µ –∑–Ω–∞–µ–º, –∫–∞–∫ —Ç—è–∂–µ–ª–æ –ø—Ä–æ–±–∏—Ç—å—Å—è –≤ —Ç–æ–ø —Å—Ç–∞—Ç–µ–π. "
            f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –í–∞—à –≥–æ–ª–æ—Å –∏ –í–∞—à–∏ –º—ã—Å–ª–∏ –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –ª—é–¥–µ–π, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!\n\n"
            f"<b>–ü—Ä–æ–µ–∫—Ç ¬´–í–∑–∞–∏–º–æ–ø–∏–∞—Ä¬ª</b> —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —á–∏—Å–ª–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π, "
            f"–≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –≤ —Ç–æ–ø —Å–≤–æ–∏–º–∏ –ª–∞–π–∫–∞–º–∏, –∫–æ–º–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ–ø–æ—Å—Ç–∞–º–∏.\n\n"
            f"–í—Å—ë –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –í—ã –º–æ—é —Å—Ç–∞—Ç—å—é —á–µ–∫–Ω–∏—Ç–µ, ‚Äî —è –í–∞—à—É. "
            f"–ê –∫–æ–≥–¥–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è –¥–µ—Å—è—Ç–∫–∏ –∏ —Ç–µ–º –±–æ–ª–µ–µ —Å–æ—Ç–Ω–∏ —á–µ–ª–æ–≤–µ–∫, —É–∂–µ –≤–∏–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
            f"üí´ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!</b>\n"
            f"–ü—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏ –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
            f"<i>–í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º –±–æ–ª—å—à–µ!</i> ü§ù"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º", url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}&text={username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤!")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=invite_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_invite_friends: {e}")
        await error_handler(update, context)

async def handle_back_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id
        back_action = query.data

        if back_action == "back_to_categories":
            await show_categories(update, context)
        elif back_action == "back_to_title":
            user_data = storage.get_user_state(user_id)['data']
            if 'category' not in user_data:
                await start(update, context)
                return
            storage.set_user_state(user_id, 'awaiting_title', user_data)
            await query.edit_message_text(
                text="üè∑Ô∏è <b>–í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n<i>(–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]]),
                parse_mode="HTML"
            )
        elif back_action == "start_over":
            await start(update, context)
        elif back_action == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
            user_state = storage.get_user_state(user_id)
            if user_state['state'] == 'awaiting_support_confirmation':
                await show_other_posts(update, context)
            else:
                await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_navigation: {e}")
        await error_handler(update, context)

async def handle_check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id

        if await check_subscription(user_id, context):
            await show_welcome(update, context)
        else:
            await show_subscription_required(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_check_subscription: {e}")
        await error_handler(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not update.message:
            return
        
        user_id = update.effective_user.id
        state = storage.get_user_state(user_id)['state']
        
        if state == 'awaiting_title':
            await handle_title_input(update, context)
        elif state == 'awaiting_url':
            await handle_url_input(update, context)
        else:
            if not update.message.text.startswith('/'):
                await update.message.reply_text(
                    "ü§î <b>–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                    parse_mode="HTML"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await error_handler(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CallbackQueryHandler(show_categories, pattern="^next_to_categories$"))
    application.add_handler(CallbackQueryHandler(handle_category_selection, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(handle_back_navigation, pattern="^back_to_"))
    application.add_handler(CallbackQueryHandler(handle_support_done, pattern="^support_done$"))
    application.add_handler(CallbackQueryHandler(handle_invite_friends, pattern="^invite_friends$"))
    application.add_handler(CallbackQueryHandler(handle_check_subscription, pattern="^check_subscription$"))
    application.add_handler(CallbackQueryHandler(start, pattern="^start_over$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    logger.info("Bot is starting...")
    print(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"CHANNEL_ID: {CHANNEL_ID}")
    print(f"BOT_USERNAME: {BOT_USERNAME}")
    
    try:
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()